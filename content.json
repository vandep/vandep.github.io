{"meta":{"title":"可可冰的奇幻之旅","subtitle":null,"description":null,"author":"KekBin","url":"http://yoursite.com"},"pages":[{"title":"关于可可冰","date":"2018-06-06T09:05:03.647Z","updated":"2018-06-06T09:05:03.647Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"一生太短，一瞬好长 联系我kekbin@163.com 个人主页IPFS主页 送你首歌血腥爱情故事 那时候的我"}],"posts":[{"title":"IPFS实践之初体验","slug":"IPFS-practice-1","date":"2018-06-06T03:05:24.000Z","updated":"2018-06-07T04:10:31.034Z","comments":true,"path":"2018/06/06/IPFS-practice-1/","link":"","permalink":"http://yoursite.com/2018/06/06/IPFS-practice-1/","excerpt":"","text":"概述IPFS的全称是InterPlanetary File System（星际文件系统），从名称上看，这是一个很炫酷、很有野心的项目。简单地说它就是一个点对点的分布式文件系统。官网和github都可以找到所有的相关资料。建议从它的白皮书，和直译中文版本开始了解，后面我们会慢慢地认识它。白皮书上指出了多个应用场景： As a mounted global filesystem, under /ipfs and /ipns. As a mounted personal sync folder that automaticallyversions, publishes, and backs up any writes. As an encrypted file or data sharing system. As a versioned package manager for all software. As the root filesystem of a Virtual Machine. As the boot filesystem of a VM (under a hypervisor). As a database: applications can write directly to theMerkle DAG data model and get all the versioning,caching, and distribution IPFS provides. As a linked (and encrypted) communications platform. As an integrity checked CDN for large files (withoutSSL). As an encrypted CDN. On webpages, as a web CDN. As a new Permanent Web where links do not die. 体验我想从第一个应用场景开始，开启我们的应用旅程。 这个场景可以把它想象成一个特别的”云盘”，这个”云盘”不依赖任何云存储商，不依赖任何平台账号，不用担心云盘提供商的内容审核，不用担心个人隐私的泄密，不用担心内容丢失或被篡改。这些特性希望通过后面的介绍，大家能够自己体会到。可以先试想下，平常我们使用云盘的几个基本需求： 上传文件 下载文件 分享文件 下面我们看IPFS如何作为一个“云盘”，来满足这些基本需求的。参考官方的get-start. 下载Demo首先下载官方提供了IPFS的Demo，比较完整的版本是Go实现的，目前最新版本是0.4.15,包含多个平台的版本，以windows 64bit系统为例，下载go-ipfs_v0.4.15_windows-amd64\\go-ipfs,由于网络限制，可能有些同学无法下载，我这边上传了一个到IPFS网络上，有需要的同学可以直接下载。 这个demo中提供了Node/Cli/Http api/Http Gateway/Library/webUi功能，本文中暂使用CLI的来体验IPFS的基本功能，为了方便在cmd直接执行IPFS命令，可以将Go-ipfs加入环境变量path中。 初始化1&gt; ipfs init 执行初始化之后，user路径下会多了一个.ipfs的文件夹，其中有一个config文件，记录的是IPFS的配置，配置内容后续的讲述中会慢慢涉及，此刻我们先了解的是IPFS节点的身份标识Identity，其中peerid，是本机IPFS的地址，下文中IPNS的使用中会涉及到peerid。当然，peerid可以通过命令行直接查看: 1&gt; ipfs id 启动Deamon执行1&gt; ipfs daemon 开启deamon之后，会启动demo中包含的IPFS服务，至此，本机就可以作为一个”个人云盘”来使用了。 上传文件12&gt; ipfs add &lt;filePath&gt; //添加文件&gt; ipfs add -r &lt;dirPath&gt; //添加文件 文件添加时，大文件会按照256KB的大小去分块，分块内容存储在.ipfs repo下的blocks文件夹下，每一个块都对应一个hash。文件添加完成之后，会返回一个文件hash，文件夹是递归添加的，会将每一个文件的hash返回，最后一个返回文件夹hash。由于IPFS中，文件都是基于内容寻址的，用户不需要关心这些文件放在哪，这些hash就是用来查找和得到文件的索引。 下载文件想要拿到一个IPFS上的文件，只需要知道文件的hash即可。下载命令：1&gt; ipfs get &lt;hash&gt; -o &lt;output_path&gt; 或者查看命令：1&gt; ipfs cat &lt;hash&gt; IPFS 的所有文件都是在本地的，Pin add可以将远端节点的文件长期保留在本地，不被垃圾回收。通过 add 添加的文件默认就是pin过的。 pin还有一个作用，pin add之后，这个节点就可以同add这个文件的节点一样，作为整个文件的服务节点。其他节点在get或pin add的时候理论上可以从这2个节点的任何一个节点拿去这个文件的块。当有很多个节点都pin add这个文件时，就会增加这个文件的获取速度，也降低了文件被删除的可能。 12&gt; ipfs pin add &lt;hash&gt;&gt; ipfs pin ls //查看哪些文件在本地是持久化的。 分享文件现实中，用户习惯获取内容的方式都通过http的方式，让用户去敲get命令去或取文件恐怕只有极客们会尝试吧。回想一下，云盘分享文件的做法，生成一个http url，把链接分享给需要的人。 IPFS demo也提供了一个http gateway，官方（公网）用的是 http://ipfs.io ,所以分享的链接可以是: http://ipfs.io/ipfs/&lt;file hash&gt; 由于某些已知原因，ipfs.io这个网关在国内是没法正常使用的，因此有条件的可以在自己的服务器上部署一个IPFS gateway（Ipfs 私网），这样，分享的链接可以是 http://&lt;gateway_host&gt;/ipfs/&lt;file hash&gt; IPNS到现在，我们分享文件还是不断地发送一个个hash组成的url，每分享一个文件就会重新生成一个url，那么可以有一固定的”网址”给我们来看你的分享呢？当然可以。这就需要借助IPNS。具体做法是1&gt; ipfs name publish &lt;file_hash&gt; 这条命令相当于把文件的hash和IPFS的节点绑定，这样就可以通过一个不变的地址来访问publish的文件 http://&lt;gateway&gt;/ipns/&lt;peerid&gt; peerid即之前介绍的本节点的唯一标识。这样做的有一个很大的缺陷，就是每次这个链接指向的都是最后一条publish的内容。但是有解决方法，大家可以查看本博客的关于页，我的IPFS主页。实现方式其实很简单，就是将将分享文件url的列表publish到ipns上。后续可能会再写一篇博文介绍做法。","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"IPFS","slug":"IPFS","permalink":"http://yoursite.com/tags/IPFS/"}]},{"title":"博客之旅-穿外衣","slug":"blog-journey-2","date":"2018-06-01T02:37:44.000Z","updated":"2018-06-04T02:45:06.459Z","comments":true,"path":"2018/06/01/blog-journey-2/","link":"","permalink":"http://yoursite.com/2018/06/01/blog-journey-2/","excerpt":"","text":"上一篇博客之旅-搭架子中已经将基本的博客搭起来了，默认是这样的 我们希望它会和默认的有一些不同。这个时候就要利用theme来设置了。还记得上一篇中hexo的目录结构么 themes目录下有本机所有的theme，默认只有landscape一种，可以在这个地址找到你喜欢的模板，比如这个博客挑选的Hueman主题,在它的文档可以查看其用法。这里简单说明。 安装模板 下载模板，直接用git clone，放到themes目录下 1$ git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman 修改博客的_config.yml 注意是blog目录下的_config.xml 1theme: hueman 如果需要用insight search功能的话，使用npm下载 1npm install -S hexo-generator-json-content 修改模板 Menu 1234Home: /# Delete this row if you don&apos;t want categories in your header nav barCategories:About: /about/index.html 如果不想把分类放到menu中，可以把Categories这一栏删掉关于页面，网页链接到/about/index.html需要在blog目录的source文件夹下建立about文件夹，然后写index.md。不知道这样的页面的md文档该如何写，可以参考了hueman仓库的site分支的source。 也可以自定义menu，比如加入LiKe： /like/index.html,同about一样的做法。唯一需要多出的一步是，在languages的zh-cn.xml中加入Like的中文 customize 可以定义侧边栏的位置、主题颜色、高亮模式、logo样式、是否显示item的缩略图、social links的链接等 widgets 定义侧边栏项目 - catalog - recent_posts - category - archive - tag - tagcloud - links search 支持insight、swiftype、baidu三种搜索引擎，选择自己所需要的配置为true即可 comment 评论模块 share 分享按钮，选项包括default、AddToAny、JiaThis、bdshare，具体效果可以参考文档 模板的配置，基本上就是这些，github上的它的文档讲的很清楚，另外还有一些如插件之类的配置，可以自己摸索！ 最后的最后—性能由于是托管在GitHub上的，带宽和访问量必然收到一定的限制，毕竟是免费的东西，方可少的话，还是够用的。另外也可以托管到放到码云OsChina上，可以将github上的博客托管迁移到Oschina。 网页部署好之后发现，会有一些请求无法完成，有一些浏览器，特别是手机上，一直在进度条上。查看了下开发者选项，发现有一些js的请求，是用的http方式请求的。由于github上托管时勾选了https选项。在github上提了一个issue，将持续关注它2018/6/4: PPoffice已经将我提交的issue标记为bug，已经修复 另外，count.js的的请求会有pending，由于没有配置disques评论相关的内容，所以可以现在_config.yml中关闭默认的comment配置","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"博客之旅--搭架子","slug":"blog_journey-1","date":"2018-05-31T10:32:23.000Z","updated":"2018-06-04T02:46:21.865Z","comments":true,"path":"2018/05/31/blog_journey-1/","link":"","permalink":"http://yoursite.com/2018/05/31/blog_journey-1/","excerpt":"","text":"心血来潮最近做了一个利用去中心化存储技术IPFS实现dweb的项目，将个人内容发布到IPFS上，生成个人主页展示。于是就有了一个用IPFS托管博客网页的想法，具体做法应该是： 12$ ipfs add &lt;index.html&gt; #将博客静态网页add到ipfs上，得到hash$ ipfs name publish &lt;hash&gt; #将博客的hash和IPFS namespace绑定 这样操作就可以直接通过IPNS来查看网页，链接可能是这样的： 1http://&lt;IPFS http Gateway&gt;/ipns/&lt;peerid&gt; 可是这样的主页地址会是一个很长的链接，譬如： 1http://&lt;xxx.xx.xxx.xxx:8080&gt;/ipns/QmSrYNxg3RdhdyyGYNBSqdH1wdRGqf1ENhXGQaHL8rACLb/ 这样的一串链接很难映射到一个域名上。因此，退而求其次，利用github page托管静态网页，把图片/音乐/视频等大体积资源文件放在IPFS上，免受了github page空间的限制 把搭个人博客的坑踩一遍网络上有很多关于用github page 托管网页，用 Hexo生成博客静态网页做法的文章。花了一些时间，把所有的步骤走了一遍，搭起来这个架子，期间也遇到了一些问题，简单记录： 本地搭建博客生成工具Hexo 安装node.js 不同的系统安装方式不太一样，windows上直接下载并安装，安装的时候默认把环境变量配置完成，用如下命令，验证是否把nodejs和npm（下载工具）安装成功，如果没有及时生效，可以重启一次电脑 12$ node -v$ npm -v 额外的，安装完之后可以建立2个文件夹，并配置下载资源存储路径，这样安装Hexo等module的时候，就可以方便地找到它。配置如下: 12$ npm config set prefix &quot;installpath\\nodejs\\node_global&quot;$ npm config set cache &quot;installpath\\nodejs\\node_cache&quot; 安装git 1程序员必备版本控制工具，非安装用户安装方式自行百度 安装Hexo 用npm直接下载到node_global目录下： 12$ npm install -g hexo-cli或简写 $ npm i -g hexo 建立本地博客系统 在本地路径下建立一个文件夹用于存放博客系统的文件路径12$ cd &lt;blog path&gt;$ hexo init #初始化hexo 其中： node_modules：是依赖包 public：存放的是生成的页面 scaffolds：命令生成文章等的模板 source：用命令创建的各种文章 themes：主题 _config.yml：整个博客的配置 db.json：source解析所得到的 package.json：项目所需模块项目的配置信息 在本地生成了一个默认的博客网页 1$ hexo generate(简写hexo g) #生成静态网页 开启本地server，默认可以通过localhost:4000来查看博客网页 1$ hexo server 3.简单修改网页配置12345678# Sitetitle: 可可冰的奇幻之旅subtitle:description:keywords:author: KekBinlanguage: zh-CNtimezone: 将网页托管到GitHub上 在github上建立一个工程，如 https://github.com/vandep/vandep.github.io 用编辑器打开你的blog项目，修改_config.yml文件deploy配置 1234deploy: type: git repo: https://github.com/vandep/vandep.github.io.git branch: master 此处有坑： type/repo/branch的冒号后面都必须有一个控制，否则发布的时候会报错 type/repo/branch和deploy的缩进必须是一个TAB 安装deploy工具 1$ npm install hexo-deployer-git --save 发布网页 1$ hexo deploy 绑定域名（非必需） 如果你有一个域名 1如果没有域名可以直接通过github.io，如https://vandep.github.io来访问 在github的blog工程下绑定域名 12在工程中，如https://github.com/vandep/vandep.github.io的settings下github pages一栏中cutom domain添加你的域名，save 在你的域名服务器上添加一条CNAME 12345678910一条主机名为www， value为vandep.github.io，这样允许带www来访问自己的域名一条主机名为@，value为vandep.github.io，允许不带www访问自己的域名可是godaddy中不允许CNAME的主机名使用@，所以只能添加一条A记录：ping vandep.github.io，得到一个ip，添加A记录主机名为@， 指为IP这样的坏处就是是固定主机的，可能ip会变，也没法CDN加速 在CNAME文件中添加域名 如 kekbin.com 在CNAME文件中添加域名放在本机 blog 根目录下的source文件夹中否则每次重新deploy的时候，都会重新生成CNAME上传，这样需要重新在github上添加域名。 6.每次修改网页的内容，重新发布 一键生成并发布1$ hexo g -d 或者先在本地生成，启动本地server，在localhost:4000验证之后再发布123$ hexo g#验证之后$ hexo d 至此，简单的架子搭好，架子搭好之后，还需要漂亮的外衣，这就需要借助theme了，下篇介绍。","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"IPFS","slug":"IPFS","permalink":"http://yoursite.com/tags/IPFS/"}]}]}